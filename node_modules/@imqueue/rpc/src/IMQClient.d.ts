/// <reference types="node" />
import { IMQClientOptions, IMQDelay, Description } from '.';
import { EventEmitter } from 'events';
/**
 * Class IMQClient - base abstract class for service clients.
 */
export declare abstract class IMQClient extends EventEmitter {
    readonly options: IMQClientOptions;
    readonly id: number;
    private readonly baseName;
    private imq;
    readonly name: string;
    private readonly serviceName;
    private readonly logger;
    private resolvers;
    /**
     * Class constructor
     *
     * @constructor
     * @param {Partial<IMQOptions>} options
     * @param {string} serviceName
     * @param {string} name
     */
    constructor(options?: Partial<IMQClientOptions>, serviceName?: string, name?: string);
    /**
     * Sends call to remote service method
     *
     * @access protected
     * @param {...any[]} args
     * @returns {Promise<T>}
     */
    protected remoteCall<T>(...args: any[]): Promise<T>;
    /**
     * Initializes client work
     *
     * @returns {Promise<void>}
     */
    start(): Promise<void>;
    /**
     * Stops client work
     *
     * @returns {Promise<void>}
     */
    stop(): Promise<void>;
    /**
     * Destroys client
     *
     * @returns {Promise<void>}
     */
    destroy(): Promise<void>;
    /**
     * Returns service description metadata.
     *
     * @param {IMQDelay} delay
     * @returns {Promise<Description>}
     */
    describe(delay?: IMQDelay): Promise<Description>;
    /**
     * Creates client for a service with the given name
     *
     * @param {string} name
     * @param {Partial<IMQServiceOptions>} options
     * @returns {IMQClient}
     */
    static create(name: string, options?: Partial<IMQClientOptions>): Promise<any>;
}
