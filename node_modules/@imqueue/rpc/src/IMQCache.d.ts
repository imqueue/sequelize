/*!
 * IMQCache implementation
 *
 * Copyright (c) 2018, imqueue.com <support@imqueue.com>
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */
import { ICache, ICacheAdapter } from '.';
/**
 * Generic cache registry
 */
export declare class IMQCache {
    private static options;
    static adapters: {
        [name: string]: ICache;
    };
    /**
     * Registers given cache adapter
     *
     * @param { ICache | string} adapter - adapter name or class or instance
     * @param {any} options - adapter specific options
     * @returns {IMQCache}
     */
    static register(adapter: ICacheAdapter, options?: any): typeof IMQCache;
    /**
     * Overrides existing adapter options with the given
     *
     * @param { ICache | string} adapter - adapter to apply options to
     * @param {any} options - adapter specific options
     * @returns {IMQCache}
     */
    static apply(adapter: ICacheAdapter, options: any): typeof IMQCache;
    /**
     * Initializes all registered cache adapters
     *
     * @returns {Promise<any>}
     */
    static init(): Promise<any>;
    /**
     * Returns registered cache adapter by its given name or class
     *
     * @param { ICache | string} adapter - adapter name or class
     * @returns {ICache} - adapter instance
     */
    static get(adapter: ICacheAdapter): ICache;
}
