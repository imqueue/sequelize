import 'reflect-metadata';
import { ILogger } from '.';
export declare type AllowedTimeFormat = 'microseconds' | 'milliseconds' | 'seconds';
/**
 * Environment variable IMQ_LOG_TIME=[1, 0] - enables/disables profiled
 * timings logging
 *
 * @type {boolean}
 */
export declare const IMQ_LOG_TIME: boolean;
/**
 * Environment variable IMQ_LOG_ARGS=[1, 0] - enables/disables profiled
 * call arguments to be logged
 *
 * @type {boolean}
 */
export declare const IMQ_LOG_ARGS: boolean;
/**
 * Environment variable IMQ_LOG_TIME_FORMAT=[
 *   'microseconds',
 *   'milliseconds',
 *   'seconds'
 * ]. Specifies profiled time logging format, by default is 'microseconds'
 *
 * @type {AllowedTimeFormat | string}
 */
export declare const IMQ_LOG_TIME_FORMAT: AllowedTimeFormat;
export interface DebugInfoOptions {
    debugTime: boolean;
    debugArgs: boolean;
    className: string;
    args: any[];
    methodName: string;
    start: number;
    logger: ILogger;
}
/**
 * Prints debug information
 *
 * @param {boolean} debugTime
 * @param {boolean} debugArgs
 * @param {string} className
 * @param {any[]} args
 * @param {string} methodName
 * @param {number} start
 * @param {ILogger} logger
 */
export declare function logDebugInfo({ debugTime, debugArgs, className, args, methodName, start, logger, }: DebugInfoOptions): void;
/**
 * Implements '@profile' decorator.
 *
 * @example
 * ~~~typescript
 * import { profile } from '@imqueue/core';
 *
 * class MyClass {
 *
 *     @profile(true) // forced profiling
 *     public myMethod() {
 *         // ...
 *     }
 *
 *     @profile() // profiling happened only depending on env DEBUG flag
 *     private innerMethod() {
 *         // ...
 *     }
 * }
 * ~~~
 *
 * @return {(
 *  target: any,
 *  methodName: (string),
 *  descriptor: TypedPropertyDescriptor<(...args: any[]) => any>
 * ) => void}
 */
export declare function profile(enableDebugTime?: boolean, enableDebugArgs?: boolean): (target: any, methodName: string, descriptor: TypedPropertyDescriptor<(...args: any[]) => any>) => void;
