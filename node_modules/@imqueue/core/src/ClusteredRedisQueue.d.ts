/// <reference types="node" />
/*!
 * Clustered messaging queue over Redis implementation
 *
 * Copyright (c) 2018, imqueue.com <support@imqueue.com>
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */
import { EventEmitter } from 'events';
import { IMessageQueue, IJson, IMQOptions, ILogger } from '.';
/**
 * Class ClusteredRedisQueue
 * Implements possibility to scale queues horizontally between several
 * redis instances.
 */
export declare class ClusteredRedisQueue implements IMessageQueue, EventEmitter {
    name: string;
    /**
     * Logger instance associated with this queue instance
     *
     * @type {ILogger}
     */
    logger: ILogger;
    /**
     * RedisQueue instances collection
     *
     * @type {RedisQueue[]}
     */
    private imqs;
    /**
     * Options associated with this queue instance
     *
     * @type {IMQOptions}
     */
    private readonly options;
    /**
     * Part of options without cluster definitions - which are generic for
     * RedisQueue instances
     *
     * @type {IMQOptions]
     */
    private readonly mqOptions;
    /**
     * Cluster servers option definitions
     *
     * @type {{ host: string, port: number }[]}
     */
    private readonly servers;
    /**
     * Current queue index (round-robin)
     *
     * @type {number}
     */
    private currentQueue;
    /**
     * Total length of RedisQueue instances
     *
     * @type {number}
     */
    private queueLength;
    /**
     * Class constructor
     *
     * @constructor
     * @param {string} name
     * @param {Partial<IMQOptions>} options
     */
    constructor(name: string, options?: Partial<IMQOptions>);
    /**
     * Starts the messaging queue.
     * Supposed to be an async function.
     *
     * @returns {Promise<ClusteredRedisQueue>}
     */
    start(): Promise<ClusteredRedisQueue>;
    /**
     * Stops the queue (should stop handle queue messages).
     * Supposed to be an async function.
     *
     * @returns {Promise<ClusteredRedisQueue>}
     */
    stop(): Promise<ClusteredRedisQueue>;
    /**
     * Sends a message to given queue name with the given data.
     * Supposed to be an async function.
     *
     * @param {string} toQueue - queue name to which message should be sent to
     * @param {IJson} message - message data
     * @param {number} [delay] - if specified, message will be handled in the
     *        target queue after specified period of time in milliseconds.
     * @param {(err: Error) => void} [errorHandler] - callback called only when
     *        internal error occurs during message send execution.
     * @returns {Promise<string>} - message identifier
     */
    send(toQueue: string, message: IJson, delay?: number, errorHandler?: (err: Error) => void): Promise<string>;
    /**
     * Safely destroys current queue, unregistered all set event
     * listeners and connections.
     * Supposed to be an async function.
     *
     * @returns {Promise<void>}
     */
    destroy(): Promise<void>;
    /**
     * Clears queue data in queue host application.
     * Supposed to be an async function.
     *
     * @returns {Promise<ClusteredRedisQueue>}
     */
    clear(): Promise<ClusteredRedisQueue>;
    /**
     * Batch imq action processing on all registered imqs at once
     *
     * @access private
     * @param {string} action
     * @param {string} message
     * @return {Promise<this>}
     */
    private batch;
    on(...args: any[]): this;
    off(...args: any[]): this;
    once(...args: any[]): this;
    addListener(...args: any[]): this;
    removeListener(...args: any[]): this;
    removeAllListeners(...args: any[]): this;
    prependListener(...args: any[]): this;
    prependOnceListener(...args: any[]): this;
    setMaxListeners(...args: any[]): this;
    listeners(...args: any[]): any[];
    rawListeners(...args: any[]): any[];
    getMaxListeners(): number;
    emit(...args: any[]): boolean;
    eventNames(...args: any[]): any;
    listenerCount(...args: any[]): any;
}
