{"version":3,"file":"View.js","sourceRoot":"","sources":["View.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;GAgBG;AACH,4BAA0B;AAE1B,+DAAgE;AAMhE,qCAAqC;AACrC;;;;;;;;;;;;GAYG;AACH,SAAgB,IAAI,CAAC,OAAoC;IACrD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;QAC7B,OAAO,GAAG,EAAE,cAAc,EAAE,OAAO,EAAE,CAAC;KACzC;SAAM,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,EAAE;QACnD,MAAM,IAAI,SAAS,CAAC,6BAA6B,CAAC,CAAC;KACtD;IAED,OAAO,CAAC,MAAW,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,OAA6B,CAAC,CAAC;AAC5E,CAAC;AARD,oBAQC;AAED;;;;;GAKG;AACH,SAAS,QAAQ,CAAC,MAAW,EAAE,OAA2B;IACtD,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;IAE9C,mCAAY,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;IACjE,iCAAU,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AAC1C,CAAC","sourcesContent":["/*!\n * @imqueue/sequelize - Sequelize ORM refines for @imqueue\n *\n * Copyright (c) 2019, imqueue.com <support@imqueue.com>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\nimport 'reflect-metadata';\nimport { ModelOptions } from 'sequelize';\nimport { addOptions, setModelName } from 'sequelize-typescript';\n\nexport interface IViewDefineOptions extends ModelOptions {\n    viewDefinition: string;\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Decorator factory: @View\n *\n * Adding view support for sequelize models, making sure views\n * could be defined in a safe way without a problems with sync/drop ops,\n * etc.\n * This decorator simply annotate a model entity the same way @Table does,\n * adding extra option \"treatAsView\" which is utilized by a BaseModel\n * class to override native behavior of sequelize models.\n *\n * @param {IViewDefineOptions | string} options - view definition options\n * @return {(...args: any[] => any)} - view annotation decorator\n */\nexport function View(options: IViewDefineOptions | string) {\n    if (typeof options === 'string') {\n        options = { viewDefinition: options };\n    } else if (!options || !options.viewDefinition.trim()) {\n        throw new TypeError('View definition is missing!');\n    }\n\n    return (target: any) => annotate(target, options as IViewDefineOptions);\n}\n\n/**\n * Does the job to define the view table\n *\n * @param {any} target - model class\n * @param {IViewDefineOptions} options - view definition options\n */\nfunction annotate(target: any, options: IViewDefineOptions): void {\n    Object.assign(options, { treatAsView: true });\n\n    setModelName(target.prototype, options.modelName || target.name);\n    addOptions(target.prototype, options);\n}\n"]}