{"version":3,"file":"NullableIndex.js","sourceRoot":"","sources":["NullableIndex.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;GAgBG;AACH,mCAAkE;AAclE,SAAgB,aAAa,CAAC,GAAG,IAAW;IACxC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;QAClB,MAAM,CAAC,MAAM,EAAE,YAAY,EAAE,kBAAkB,CAAC,GAAG,IAAI,CAAC;QACxD,MAAM,aAAa,GAAG,IAAI,YAAY,WAAW,CAAC;QAClD,MAAM,gBAAgB,GAAG,IAAI,YAAY,eAAe,CAAC;QAEzD,aAAK,CAAC,EAAE,UAAU,EAAE,aAAa,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC,CAC1D,MAAM,EAAE,YAAY,EAAE,kBAAkB,CAAC,CAAC;QAC9C,aAAK,CAAC,EAAE,UAAU,EAAE,gBAAgB,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC,CAChE,MAAM,EAAE,YAAY,EAAE,kBAAkB,CAAC,CAAC;QAE9C,OAAO;KACV;IAED,OAAO,CACH,MAAW,EACX,YAAoB,EACpB,kBAAuC,EACzC,EAAE;QACA,aAAK,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;YACzB,UAAU,EAAE,IAAI,YAAY,WAAW;SAC1C,CAAC,CAAC,CAAC,MAAM,EAAE,YAAY,EAAE,kBAAkB,CAAC,CAAC;QAC9C,aAAK,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;YACzB,UAAU,EAAE,IAAI,YAAY,eAAe;SAC9C,CAAC,CAAC,CAAC,MAAM,EAAE,YAAY,EAAE,kBAAkB,CAAC,CAAC;IAClD,CAAC,CAAC;AACN,CAAC;AA1BD,sCA0BC","sourcesContent":["/*!\n * @imqueue/sequelize - Sequelize ORM refines for @imqueue\n *\n * Copyright (c) 2019, imqueue.com <support@imqueue.com>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\nimport { ColumnIndexOptions, FunctionType, Index } from './index';\n\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\n\nexport type NullableColumnIndexOptions = Omit<ColumnIndexOptions, 'expression'>;\n\nexport function NullableIndex(\n    options: Partial<NullableColumnIndexOptions>,\n): FunctionType;\nexport function NullableIndex(\n    target: any,\n    propertyName: string,\n    propertyDescriptor?: PropertyDescriptor,\n): void;\nexport function NullableIndex(...args: any[]): FunctionType | void {\n    if (args.length >= 2) {\n        const [target, propertyName, propertyDescriptor] = args;\n        const nullPredicate = `\"${propertyName}\" IS NULL`;\n        const notNullPredicate = `\"${propertyName}\" IS NOT NULL`;\n\n        Index({ expression: nullPredicate, predicate: nullPredicate })(\n            target, propertyName, propertyDescriptor);\n        Index({ expression: notNullPredicate, predicate: notNullPredicate })(\n            target, propertyName, propertyDescriptor);\n\n        return;\n    }\n\n    return (\n        target: any,\n        propertyName: string,\n        propertyDescriptor?: PropertyDescriptor,\n    ) => {\n        Index(Object.assign(args[0], {\n            expression: `\"${propertyName}\" IS NULL`\n        }))(target, propertyName, propertyDescriptor);\n        Index(Object.assign(args[0], {\n            expression: `\"${propertyName}\" IS NOT NULL`\n        }))(target, propertyName, propertyDescriptor);\n    };\n}\n"]}