{"version":3,"file":"BaseDictionary.js","sourceRoot":"","sources":["BaseDictionary.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;GAgBG;AACH,sCAAwC;AAExC,+DAI8B;AAE9B,iDAA8C;AAE9C,qCAAqC;AACrC,MAAsB,cAAkB,SAAQ,2BAAe;IAW3D,YACI,MAAwB,EACxB,OAAsB,IACtB,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;CAChC;AAXG;IAHC,cAAQ,CAAC,QAAQ,CAAC;IAClB,gCAAS,CAAC,KAAK,CAAC;IAChB,6BAAM,CAAC,+BAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;;4CACR;AAKpB;IAHC,cAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC;IACxB,gCAAS,CAAC,IAAI,CAAC;IACf,6BAAM,CAAC,+BAAQ,CAAC,IAAI,CAAC;;mDACK;AAT/B,wCAeC","sourcesContent":["/*!\n * @imqueue/sequelize - Sequelize ORM refines for @imqueue\n *\n * Copyright (c) 2019, imqueue.com <support@imqueue.com>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\nimport { property } from '@imqueue/rpc';\nimport { ModelAttributes } from 'sequelize';\nimport {\n    AllowNull,\n    Column,\n    DataType,\n} from 'sequelize-typescript';\nimport { BuildOptions } from './BaseModel';\nimport { BaseParanoid } from './BaseParanoid';\n\n// noinspection JSUnusedGlobalSymbols\nexport abstract class BaseDictionary<T> extends BaseParanoid<T> {\n    @property('string')\n    @AllowNull(false)\n    @Column(DataType.STRING(45))\n    public name: string;\n\n    @property('string', true)\n    @AllowNull(true)\n    @Column(DataType.TEXT)\n    public description: string;\n\n    protected constructor(\n        values?: ModelAttributes,\n        options?: BuildOptions,\n    ) { super(values, options); }\n}\n"]}