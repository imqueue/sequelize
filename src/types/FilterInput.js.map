{"version":3,"file":"FilterInput.js","sourceRoot":"","sources":["FilterInput.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * @imqueue/sequelize - Sequelize ORM refines for @imqueue\n *\n * Copyright (c) 2019, imqueue.com <support@imqueue.com>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\nimport { property } from '@imqueue/rpc';\nimport { Op } from 'sequelize';\n\nexport const FILTER_OPS = {\n    $and: Op.and,\n    $or: Op.or,\n    $gt: Op.gt,\n    $gte: Op.gte,\n    $lt: Op.lt,\n    $lte: Op.lte,\n    $ne: Op.ne,\n    $eq: Op.eq,\n    $not: Op.not,\n    $between: Op.between,\n    $notBetween: Op.notBetween,\n    $in: Op.in,\n    $notIn: Op.notIn,\n    $like: Op.like,\n    $notLike: Op.notLike,\n    $iLike: Op.iLike,\n    $notILike: Op.notILike,\n    $regexp: Op.regexp,\n    $notRegexp: Op.notRegexp,\n    $iRegexp: Op.iRegexp,\n    $notIRegexp: Op.notIRegexp,\n    $overlap: Op.overlap,\n    $contains: Op.contains,\n    $contained: Op.contained,\n    $any: Op.any,\n    $adjacent: Op.adjacent,\n    $strictLeft: Op.strictLeft,\n    $strictRight: Op.strictRight,\n    $noExtendRight: Op.noExtendRight,\n    $noExtendLeft: Op.noExtendLeft,\n};\n\nexport class FilterInput {\n    @property(\n        'FilterInput | Array<FilterInput|number|string|boolean|null>',\n        true)\n    public $and?:\n        FilterInput | Array<FilterInput|number|string|boolean|null>;\n\n    @property(\n        'FilterInput | Array<FilterInput|number|string|boolean|null>',\n        true)\n    public $or?:\n        FilterInput | Array<FilterInput|number|string|boolean|null>;\n\n    @property('number', true)\n    public $gt?: number;\n\n    @property('number', true)\n    public $gte?: number;\n\n    @property('number', true)\n    public $lt?: number;\n\n    @property('number', true)\n    public $lte?: number;\n\n    @property('number | string', true)\n    public $ne?: number | string;\n\n    @property('number | string | boolean | null', true)\n    public $eq?: number | string | boolean | null;\n\n    @property('boolean', true)\n    public $not?: boolean;\n\n    @property('Array<number | string>', true)\n    public $between?: Array<number | string>;\n\n    @property('Array<number | string>', true)\n    public $notBetween?: Array<number | string>;\n\n    @property('Array<number | string | boolean | null>', true)\n    public $in?: Array<number | string | boolean | null>;\n\n    @property('Array<number | string | boolean | null>', true)\n    public $notIn?: Array<number | string | boolean | null>;\n\n    @property('string', true)\n    public $like?: string;\n\n    @property('string', true)\n    public $notLike?: string;\n\n    @property('string', true)\n    public $iLike?: string;\n\n    @property('string', true)\n    public $notILike?: string;\n\n    @property('string', true)\n    public $regexp?: string;\n\n    @property('string', true)\n    public $notRegexp?: string;\n\n    @property('string', true)\n    public $iRegexp?: string;\n\n    @property('string', true)\n    public $notIRegexp?: string;\n\n    @property('[number, number]', true)\n    public $overlap?: [number, number];\n\n    @property('number | [number, number]', true)\n    public $contains?: number | [number, number];\n\n    @property('[number, number]', true)\n    public $contained?: [number, number];\n\n    @property('number[] | string[]', true)\n    public $any?: number[] | string[];\n\n    @property('[number, number]', true)\n    public $adjacent?: [number, number];\n\n    @property('[number, number]', true)\n    public $strictLeft?: [number, number];\n\n    @property('[number, number]', true)\n    public $strictRight?: [number, number];\n\n    @property('[number, number]', true)\n    public $noExtendRight?: [number, number];\n\n    @property('[number, number]', true)\n    public $noExtendLeft?: [number, number];\n}\n"]}