{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * @imqueue/sequelize - Sequelize ORM refines for @imqueue\n *\n * Copyright (c) 2019, imqueue.com <support@imqueue.com>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\nimport { js } from '@imqueue/js';\nimport { DEFAULT_IMQ_SERVICE_OPTIONS, ILogger } from '@imqueue/rpc';\nimport chalk from 'chalk';\nimport * as fs from 'fs';\nimport { resolve, sep } from 'path';\nimport { SequelizeOptions } from 'sequelize-typescript';\nimport { Sequelize } from './BaseModel';\nimport isDefined = js.isDefined;\nimport isOk = js.isOk;\n\n/* models exports! */\nexport * from './BaseDictionary';\nexport * from './BaseParanoid';\nexport * from './BaseModel';\nexport * from './helpers';\nexport * from './decorators';\nexport * from './types';\n\nconst JS_EXT_RX = /\\.js$/;\n\n/**\n * Returns all files list from a given directory\n *\n * @param {string} dir\n * @return {string[]}\n */\nfunction walk(dir: string) {\n    let results: string[] = [];\n\n    for (let file of fs.readdirSync(dir)) {\n        file = resolve(dir, file);\n\n        const stat = fs.statSync(file);\n\n        if (stat && stat.isDirectory()) {\n            results = results.concat(walk(file));\n        } else {\n            results.push(file);\n        }\n    }\n\n    return results;\n}\n\n/**\n * ORM database() configuration options. Database connection string\n * can be provided explicitly or by setting DB_CONN_STR environment variable.\n *\n * @type {{\n *  logger: ILogger,\n *  connectionString: string,\n *  sequelize: SequelizeOptions,\n *  modelsPath: string\n * }} IMQORMOptions\n */\nexport interface IMQORMOptions {\n    logger: ILogger;\n    connectionString?: string;\n    sequelize: SequelizeOptions;\n    modelsPath: string;\n}\n\n/**\n * Database connection string from environment variable\n *\n * @type {string}\n */\nexport const DB_CONN_STR = process.env.DB_CONN_STR;\n\n/**\n * SQL prettify flag. Can be set by environment variable\n * SQL_PRETTIFY = 1|0. By default is false.\n *\n * @type {boolean}\n */\nexport const SQL_PRETTIFY = +(process.env.SQL_PRETTIFY || 0) > 0;\n\n/**\n * SQL colorize flag. Can be set by environment variable\n * SQL_COLORIZE = 1|0. By default is false.\n *\n * @type {boolean}\n */\nexport const SQL_COLORIZE = +(process.env.SQL_COLORIZE || 0) > 0;\n\n// tslint:disable-next-line:no-var-requires\nconst sqlFormatter = require('sql-formatter');\nconst RX_SQL_NUM_LAYOUT = /\\s+(['\"]?\\d+['\"]?,?)\\r?\\n/g;\nconst RX_SQL_NUM_END = /(\\d+['\"]?)\\s+(\\))/g;\nconst RX_BRK_DBL_AND = /&\\s+&/g;\nconst RX_BRK_CAST = /\\s+(\\[|::)(\\s+)?/g;\nconst RX_BRK_POCKETS = /(\\$)\\s+(\\d)/g;\nconst RX_SQL_PREFIX = /Execut(ed|ing) \\(default\\):/;\n\n/**\n * Returns pretty formatted SQL string of the given input SQL string\n *\n * @param {string} sql\n * @return {string}\n */\nexport function formatSql(sql: string): string {\n    return SQL_PRETTIFY ?\n        sqlFormatter.format(sql)\n            .replace(RX_SQL_NUM_LAYOUT, '$1 ')\n            .replace(RX_SQL_NUM_END, '$1$2')\n            .replace(RX_BRK_DBL_AND, '&&')\n            .replace(RX_BRK_CAST, '$1')\n            .replace(RX_BRK_POCKETS, '$1$2')\n        : sql;\n}\n\n// noinspection SuspiciousTypeOfGuard\n/**\n * Returns logging routine property for sequelize config options\n * taking into account configured SQL_PRETTIFY, SQL_COLORIZE environment\n * variables options.\n *\n * @param {ILogger} logger\n * @return {(sql: string, time: number) => string}\n */\nconst logging = (logger: ILogger) => (sql: string, time: number) =>\n    logger.log(SQL_COLORIZE\n        ? `${(chalk.bold.yellow as (...args: any[]) => any)('SQL Query:')} ${\n            (chalk.cyan  as (...args: any[]) => any)(\n                formatSql(sql.replace(RX_SQL_PREFIX, '')\n            ))}`\n        : `SQL Query: ${formatSql(sql.replace(RX_SQL_PREFIX, ''))}`,\n        (typeof time === 'number' ? `executed in ${time} ms` : '')\n    );\n\nlet orm: Sequelize;\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Initialized all known by this package database models and\n * returns instance of Sequelize, mapped with these models\n *\n * @param {IMQORMOptions} [options]\n * @return {Sequelize}\n */\nexport function database(\n    options?: IMQORMOptions,\n): Sequelize {\n    if (typeof orm !== 'undefined') {\n        return orm;\n    } else if (typeof options === 'undefined') {\n        throw new TypeError(\n            'First call of database() must provide valid options!'\n        );\n    }\n\n    if (!options.connectionString) {\n        if (!DB_CONN_STR) {\n            throw new TypeError(\n                'Either environment DB_CONN_STR should be set or ' +\n                'connectionString property given!'\n            );\n        }\n\n        options.connectionString = DB_CONN_STR;\n    }\n\n    if (!options.connectionString) {\n        throw new TypeError('Database connection string is required!')\n    }\n\n    if (!options.logger) {\n        options.logger = DEFAULT_IMQ_SERVICE_OPTIONS.logger || console;\n    }\n\n    options.sequelize.logging =\n        !isDefined(options.sequelize.logging) ||\n        isOk(options.sequelize.logging)\n            ? logging(\n                typeof options.sequelize.logging === 'function'\n                    ? options.sequelize.logging as any as ILogger\n                    : options.logger,\n            )\n            : options.sequelize.logging as boolean;\n\n    orm = new Sequelize(options.connectionString as string, options.sequelize);\n\n    orm.addModels(walk(resolve(options.modelsPath))\n        .filter(name => JS_EXT_RX.test(name))\n        .map(filename => require(filename)[\n            filename.split(sep)\n                .reverse()[0]\n                .replace(JS_EXT_RX, '')\n            ]));\n\n    options.logger.log('Database models initialized...');\n\n    return orm;\n}\n"]}